/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

 
class Solution {
public:

ListNode* reverse(ListNode* head)
{
    ListNode*p,*q,*r;
    q=r=NULL;
    p = head;
    while(p!=NULL)
    { 
         q=p;
          p=p->next;
         q->next = r;
         r=q;         
    }
   
   return q;
}
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {   

        ListNode* first =   reverse(l1);
        ListNode*second  =  reverse(l2);

        ListNode*third,*last;
        third=last=NULL;
     
        int sum=0,carry=0;

        while(first || second)
        {
            sum = (first?first->val:0) + (second?second->val:0) + carry;
          
            if(sum/10 !=0)
            {
                carry=1;
                sum=sum%10;
            }
          else
          {
              carry=0;
          }

            cout<<sum;
            
            if(third==NULL)
            {  
                ListNode*temp = new ListNode(sum);
                 last =  third = temp;
                
            }
            else
            {
                 ListNode*temp = new ListNode(sum);
                 last->next = temp;
                 last=temp;
            }

          if(first)
             first = first->next;
            
           if(second)
             second  = second->next;

        }
     
     if(carry != 0)
     {
            ListNode*temp = new ListNode(carry);
                 last->next = temp;
                 last=temp;
     }
     
    third = reverse(third);
return third;
    }
};
