class Solution {
public:


// int solve(string a , string b , int i , int j , vector<vector<int>>&dp)
// {  
//   if(i == a.size() || j == b.size())
//       return 0;

//  if(dp[i][j] != -1)
//     return dp[i][j];

//   if(a[i] == b[j])
//     dp[i][j] = 1 + solve(a,b,i+1,j+1,dp);
//   else
//    dp[i][j] = max(solve(a,b,i+1,j,dp) , solve(a,b,i,j+1,dp));

//       return dp[i][j];
// }
    int longestCommonSubsequence(string text1, string text2) {
        
        int n = text1.size();
        int m = text2.size();
       vector<vector<int>>dp(n+1 , vector<int>(m+1,0));

        //  return solve(text1 , text2 , 0,0,dp);
       
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(text1[i-1] == text2[j-1])
                        dp[i][j] = dp[i-1][j-1] + 1;
            else
              dp[i][j] = max(dp[i-1][j] , dp[i][j-1]);
            }
        }
        
        return dp[n][m];

      
       
    }
};
